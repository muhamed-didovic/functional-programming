{"version":3,"sources":["../../modules/13.js"],"names":["Task","require","fs","app","readFile","err","contents","newContents","replace","writeFile","_","console","log","filename","enc","rej","res","writeFIle","app2","map","chain","app3","replaced","fork","error","e"],"mappings":";;AAAA;;AAEA;;AAEA,IAAMA,OAAOC,QAAQ,WAAR,CAAb;AACA,IAAMC,KAAKD,QAAQ,IAAR,CAAX;;AAGA;AACA,IAAME,MAAM,SAANA,GAAM;AAAA,SACVD,GAAGE,QAAH,CAAY,WAAZ,EAAyB,OAAzB,EAAkC,UAACC,GAAD,EAAMC,QAAN,EAAmB;AACnD,QAAID,GAAJ,EAAS,MAAMA,GAAN;;AAET,QAAME,cAAcD,SAASE,OAAT,CAAiB,IAAjB,EAAuB,GAAvB,CAApB;;AAEAN,OAAGO,SAAH,CAAa,cAAb,EAA6BF,WAA7B,EAA0C,UAACF,GAAD,EAAMK,CAAN,EAAY;AACpD,UAAIL,GAAJ,EAAS,MAAMA,GAAN;AACTM,cAAQC,GAAR,CAAY,SAAZ;AACD,KAHD;AAKD,GAVD,CADU;AAAA,CAAZ;;AAcA,IAAMR,WAAW,SAAXA,QAAW,CAACS,QAAD,EAAWC,GAAX;AAAA,SACf,IAAId,IAAJ,CAAS,UAACe,GAAD,EAAMC,GAAN;AAAA,WACPd,GAAGE,QAAH,CAAYS,QAAZ,EAAsBC,GAAtB,EAA2B,UAACT,GAAD,EAAMC,QAAN;AAAA,aACzBD,MAAMU,IAAIV,GAAJ,CAAN,GAAiBW,IAAIV,QAAJ,CADQ;AAAA,KAA3B,CADO;AAAA,GAAT,CADe;AAAA,CAAjB;;AAKA,IAAMW,YAAY,SAAZA,SAAY,CAACJ,QAAD,EAAWP,QAAX;AAAA,SAChB,IAAIN,IAAJ,CAAS,UAACe,GAAD,EAAMC,GAAN;AAAA,WACPd,GAAGO,SAAH,CAAaI,QAAb,EAAuBP,QAAvB,EAAiC,UAACD,GAAD,EAAMK,CAAN;AAAA,aAC/BL,MAAMU,IAAIV,GAAJ,CAAN,GAAiBW,IAAIV,QAAJ,CADc;AAAA,KAAjC,CADO;AAAA,GAAT,CADgB;AAAA,CAAlB;;AAKA;AACA,IAAMY,OAAO,SAAPA,IAAO;AAAA,SACXd,SAAS,aAAT,EAAwB,OAAxB,EACGe,GADH,CACO;AAAA,WAAYb,SAASE,OAAT,CAAiB,IAAjB,EAAuB,GAAvB,CAAZ;AAAA,GADP,EAEGY,KAFH,CAES;AAAA,WAAYH,UAAU,cAAV,EAA0BX,QAA1B,CAAZ;AAAA,GAFT,CADW;AAAA,CAAb;;AAKA;AACA;AACA;;;AAGA;AACA,IAAMe,OACJjB,SAAS,aAAT,EAAwB,OAAxB,EACGe,GADH,CACO;AAAA,SAAYb,SAASE,OAAT,CAAiB,IAAjB,EAAuB,GAAvB,CAAZ;AAAA,CADP,EAEGY,KAFH,CAES;AAAA,SAAYH,UAAU,cAAV,EAA0BK,QAA1B,CAAZ;AAAA,CAFT,CADF;;AAKA;AACAD,KAAKE,IAAL,CAAU;AAAA,SAAKZ,QAAQa,KAAR,CAAcC,CAAd,CAAL;AAAA,CAAV,EAAiC;AAAA,SAAOd,QAAQC,GAAR,CAAY,SAAZ,CAAP;AAAA,CAAjC","file":"13.js","sourcesContent":["//Use Task for Asynchronous Actions\n\n//We refactor a standard node callback style workflow into a composed task-based workflow.\n\nconst Task = require('data.task')\nconst fs = require('fs')\n\n\n//OLD style with callbacks\nconst app = () =>\n  fs.readFile('config.js', 'utf-8', (err, contents) => {\n    if (err) throw err;\n\n    const newContents = contents.replace(/8/g, '6');\n\n    fs.writeFile('config1.json', newContents, (err, _) => {\n      if (err) throw err;\n      console.log('success');\n    });\n\n  });\n\n\nconst readFile = (filename, enc) =>\n  new Task((rej, res) =>\n    fs.readFile(filename, enc, (err, contents) =>\n      err ? rej(err) : res(contents)));\n\nconst writeFIle = (filename, contents) =>\n  new Task((rej, res) =>\n    fs.writeFile(filename, contents, (err, _) =>\n      err ? rej(err) : res(contents)));\n\n//first way\nconst app2 = () =>\n  readFile('config.json', 'utf-8')\n    .map(contents => contents.replace(/8/g, '6'))\n    .chain(contents => writeFIle('config1.json', contents))\n\n//let's do in clean way, library should not handle this case\n//app2().fork(e => console.error(e),\n//            con => console.log('success'));\n\n\n//second way\nconst app3 =\n  readFile('config.json', 'utf-8')\n    .map(contents => contents.replace(/8/g, '6'))\n    .chain(replaced => writeFIle('config1.json', replaced))\n\n//let's do in clean way, library should not handle this case\napp3.fork(e => console.error(e), con => console.log('success'));\n"]}