{"version":3,"sources":["../../modules/8.js"],"names":["Sum","x","concat","y","inspect","toString","empty","All","First","sum","xs","reduce","acc","all","first","console","log"],"mappings":";;AAAA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA,IAAMA,MAAM,SAANA,GAAM;AAAA,SACT;AACCC,QADD;AAECC,YAAQ;AAAA,UAAKC,CAAL,QAAEF,CAAF;AAAA,aACND,IAAIC,IAAIE,CAAR,CADM;AAAA,KAFT;AAICC,aAAS;AAAA,sBACAH,CADA;AAAA,KAJV;AAMCI,cAAU;AAAA,sBACDJ,CADC;AAAA;AANX,GADS;AAAA,CAAZ;;AAWAD,IAAIM,KAAJ,GAAY;AAAA,SAAMN,IAAI,CAAJ,CAAN;AAAA,CAAZ;;AAEA;AACA,IAAMO,MAAM,SAANA,GAAM;AAAA,SACT;AACCN,QADD;AAECC,YAAQ;AAAA,UAAKC,CAAL,SAAEF,CAAF;AAAA,aACNM,IAAIN,KAAKE,CAAT,CADM;AAAA,KAFT;AAICC,aAAS;AAAA,sBACAH,CADA;AAAA,KAJV;AAMCI,cAAU;AAAA,sBACDJ,CADC;AAAA;AANX,GADS;AAAA,CAAZ;;AAWAM,IAAID,KAAJ,GAAY;AAAA,SAAMC,IAAI,IAAJ,CAAN;AAAA,CAAZ;AACA;AACA;;;AAGA;AACA;;;AAGA;;AAEA,IAAMC,QAAQ,SAARA,KAAQ;AAAA,SACX;AACCP,QADD;AAECC,YAAQ;AAAA,aACNM,MAAMP,CAAN,CADM;AAAA,KAFT;AAICG,aAAS;AAAA,wBACEH,CADF;AAAA,KAJV;AAMCI,cAAU;AAAA,wBACCJ,CADD;AAAA;AANX,GADW;AAAA,CAAd;;AAWA;;;AAGA,IAAMQ,MAAM,SAANA,GAAM;AAAA,SACVC,GAAGC,MAAH,CAAU,UAACC,GAAD,EAAMX,CAAN;AAAA,WAAYW,MAAMX,CAAlB;AAAA,GAAV,EAA+B,CAA/B,CADU;AAAA,CAAZ;;AAGA,IAAMY,MAAM,SAANA,GAAM;AAAA,SACVH,GAAGC,MAAH,CAAU,UAACC,GAAD,EAAMX,CAAN;AAAA,WAAYW,OAAOX,CAAnB;AAAA,GAAV,EAAgC,IAAhC,CADU;AAAA,CAAZ;;AAGA,IAAMa,QAAQ,SAARA,KAAQ;AAAA,SACZJ,GAAGC,MAAH,CAAU,UAACC,GAAD,EAAMX,CAAN;AAAA,WAAYW,GAAZ;AAAA,GAAV,CADY;AAAA,CAAd;;AAGAG,QAAQC,GAAR,CAAYF,MAAM,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAAN,CAAZ","file":"8.js","sourcesContent":["//Ensure failsafe combination using monoids\n//In this video we define monoids and promote our semigroups\n\n//monoin is neutral entity that doesn't change semigroup\n\n//1 + 0 = 1\n//2 + 0 = 2\n//x + 0 = x\n//here 0 is monoid\n\n//A semigroup, it does not have an element to return so it's not a safe operation, whereas with the monoids\n// we could take as many as we possibly want, even none, and still return us back something.\n// It's a perfectly safe operation here that we can reduce as many of them as we'd like.\n\n\nconst Sum = x =>\n  ({\n    x,\n    concat: ({x: y}) =>\n      Sum(x + y),\n    inspect: () =>\n      `Sum(${x})`,\n    toString: () =>\n      `Sum(${x})`\n  })\n\nSum.empty = () => Sum(0)\n\n//const res = Sum(1).concat(Sum(2))\nconst All = x =>\n  ({\n    x,\n    concat: ({x: y}) =>\n      All(x && y),\n    inspect: () =>\n      `All(${x})`,\n    toString: () =>\n      `All(${x})`\n  })\n\nAll.empty = () => All(true)\n//true && true -> false\n//false && true -> false\n\n\n//true || false -> true\n//false || false -> false\n\n\n//const res = All(false).concat(All(true))\n\nconst First = x =>\n  ({\n    x,\n    concat: _ =>\n      First(x),\n    inspect: () =>\n      `First(${x})`,\n    toString: () =>\n      `First(${x})`\n  })\n\n// const res = First(\"blah\").concat(First(\"ice cream\")).concat(First('meta programming'))\n\n\nconst sum = xs =>\n  xs.reduce((acc, x) => acc + x, 0)\n\nconst all = xs =>\n  xs.reduce((acc, x) => acc && x, true)\n\nconst first = xs =>\n  xs.reduce((acc, x) => acc)\n\nconsole.log(first([1,2,3]))\n\n"]}