{"version":3,"sources":["../../modules/22.js"],"names":["fs","require","Task","futurize","List","readFile","files1","f","map","fileName","console","log","files","traverse","of","fn","fork","error"],"mappings":";;AAAA;;AAEA;;;AAGA,IAAMA,KAAKC,QAAQ,IAAR,CAAX;AACA,IAAMC,OAAOD,QAAQ,WAAR,CAAb;AACA,IAAME,WAAWF,QAAQ,UAAR,EAAoBE,QAApB,CAA6BD,IAA7B,CAAjB;;eACiBD,QAAQ,eAAR,C;IAATG,I,YAAAA,I;;AAER,IAAMC,WAAWF,SAASH,GAAGK,QAAZ,CAAjB;;AAEA;AACA,IAAMC,SAAS,CAAC,mBAAD,EAAsB,aAAtB,CAAf;AACA,IAAMC,IAAID,OAAOE,GAAP,CAAW;AAAA,SAAYH,SAASI,QAAT,EAAmB,OAAnB,CAAZ;AAAA,CAAX,CAAV;AACAC,QAAQC,GAAR,CAAY,MAAZ,EAAoBJ,CAApB;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA,IAAMK,QAAQR,KAAK,CAAC,mBAAD,EAAsB,aAAtB,CAAL,CAAd;;AAEA;AACA;AACA;AACA;AACA;AACAQ,MAAMC,QAAN,CAAeX,KAAKY,EAApB,EAAwB;AAAA,SAAMT,SAASU,EAAT,EAAa,OAAb,CAAN;AAAA,CAAxB,EACGC,IADH,CACQN,QAAQO,KADhB,EACuBP,QAAQC,GAD/B;;AAGA;AACA;AACA","file":"22.js","sourcesContent":["//Leapfrogging types with Traversable\n\n//We use the traversable instance on List to reimplement Promise.all() type functionality.\n\n\nconst fs = require('fs')\nconst Task = require('data.task')\nconst futurize = require('futurize').futurize(Task)\nconst { List } = require('immutable-ext')\n\nconst readFile = futurize(fs.readFile)\n\n//1 way\nconst files1 = ['./examples/box.js', 'config.json'];\nconst f = files1.map(fileName => readFile(fileName, 'ytf-8'));\nconsole.log('ffff', f);\n//we have this [Task] but we want this Tak([])\n// it means array of Tasks should be task of array of results\n// turn these types inside out, leapfrog types\n// so that arrays are inside, when we want this we call traverse\n// this leads to second way below\n\n\n//2 way\nconst files = List(['./examples/box.js', 'config.json'])\n\n//here we add Task.of(type up) as first argument,\n// we are not in typed setting, it can't figure out what outer type should be\n// in case of failure\n//traverse returns Task\n//in end we have List(Task) of results\nfiles.traverse(Task.of, fn => readFile(fn, 'utf-8'))\n  .fork(console.error, console.log)\n\n// streams don't have traverse method\n// traverse expects return applicative functor from a function\n// so Task is applicative functor\n"]}