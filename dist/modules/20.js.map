{"version":3,"sources":["../../modules/20.js"],"names":["require","List","res1","of","x","ap","res2","res3","y","res4","console","log","merch","z","res"],"mappings":";;AAAA;;AAEA;;eAEiBA,QAAQ,eAAR,C;IAATC,I,YAAAA,I;;AAER;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAMC,OAAOD,KAAKE,EAAL,CAAQ;AAAA,SAAKC,CAAL;AAAA,CAAR,EAAgBC,EAAhB,CAAmBJ,KAAKE,EAAL,CAAQ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAR,CAAnB,CAAb;AACA,IAAMG,OAAOL,KAAKE,EAAL,CAAQ;AAAA,SAAKC,CAAL;AAAA,CAAR,EAAgBC,EAAhB,CAAmBJ,KAAK,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAAL,CAAnB,CAAb;;AAEA;AACA,IAAMM,OAAON,KAAKE,EAAL,CAAQ;AAAA,SAAK;AAAA,WAAQC,CAAR,WAAeI,CAAf;AAAA,GAAL;AAAA,CAAR,EAAiCH,EAAjC,CAAoCJ,KAAK,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAAL,CAApC,EAAmDI,EAAnD,CAAsDJ,KAAK,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAAL,CAAtD,CAAb;AACA,IAAMQ,OAAOR,KAAKE,EAAL,CAAQ;AAAA,SAAK;AAAA,WAAQC,CAAR,WAAeI,CAAf;AAAA,GAAL;AAAA,CAAR,EAAiCH,EAAjC,CAAoCJ,KAAKE,EAAL,CAAQ,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAAR,CAApC,EAAsDE,EAAtD,CAAyDJ,KAAKE,EAAL,CAAQ,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAAR,CAAzD,CAAb;AACAO,QAAQC,GAAR,CAAY,MAAZ,EAAoBT,IAApB;AACAQ,QAAQC,GAAR,CAAY,MAAZ,EAAoBL,IAApB;AACAI,QAAQC,GAAR,CAAY,MAAZ,EAAoBJ,IAApB;AACAG,QAAQC,GAAR,CAAY,MAAZ,EAAoBF,IAApB;;AAEA,IAAMG,QAAQ,SAARA,KAAQ;AAAA,SACZX,KAAKE,EAAL,CAAQ;AAAA,WAAK;AAAA,aAAK;AAAA,eAAOC,CAAP,SAAYI,CAAZ,SAAiBK,CAAjB;AAAA,OAAL;AAAA,KAAL;AAAA,GAAR,EACGR,EADH,CACMJ,KAAK,CAAC,UAAD,EAAa,SAAb,CAAL,CADN,EAEGI,EAFH,CAEMJ,KAAK,CAAC,OAAD,EAAU,QAAV,EAAoB,OAApB,CAAL,CAFN,EAGGI,EAHH,CAGMJ,KAAK,CAAC,OAAD,EAAU,OAAV,CAAL,CAHN,CADY;AAAA,CAAd;;AAMA,IAAMa,MAAMF,OAAZ;AACAF,QAAQC,GAAR,CAAYG,GAAZ","file":"20.js","sourcesContent":["//List comprehensions with Applicative Functors\n\n//We annihilate the need for the ol' nested for loop using Applicatives.\n\nconst { List } = require('immutable-ext');\n\n//messy imperative code transform into applicative functor\n// for(x in xs) {\n//   for(y in ys) {\n//     for(z in zs) {\n//     }\n//   }\n// }\n\nconst res1 = List.of(x => x).ap(List.of([1, 2, 3]));\nconst res2 = List.of(x => x).ap(List([1,2,3]));\n\n//run like for in for loop\nconst res3 = List.of(x => y => `${x} - ${y}`).ap(List([1,2,3])).ap(List([4,5,6]));\nconst res4 = List.of(x => y => `${x} - ${y}`).ap(List.of([1,2,3])).ap(List.of([4,5,6]));\nconsole.log('res1', res1);\nconsole.log('res2', res2);\nconsole.log('res3', res3);\nconsole.log('res4', res4);\n\nconst merch = () =>\n  List.of(x => y => z =>`${x}-${y}-${z}`)\n    .ap(List(['teeshirt', 'sweater']))\n    .ap(List(['large', 'medium', 'small']))\n    .ap(List(['black', 'white']))\n\nconst res = merch()\nconsole.log(res)"]}