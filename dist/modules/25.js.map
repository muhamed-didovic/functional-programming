{"version":3,"sources":["../../modules/25.js"],"names":["require","Right","Left","fromNullable","Box","Task","List","res","chain","x","split","console","log","first","xs","largeNumbers","filter","larger","app","map","fake","id","name","best_friend_id","Db","find","rej","eitherToTask","e","fold","rejected","of","user","fork","error","r"],"mappings":";;AAAA;;AAEA;;;eAGsCA,QAAQ,mBAAR,C;IAA9BC,K,YAAAA,K;IAAOC,I,YAAAA,I;IAAMC,Y,YAAAA,Y;;AACrB,IAAMC,MAAMJ,QAAQ,gBAAR,CAAZ;AACA,IAAMK,OAAOL,QAAQ,WAAR,CAAb;;gBACeA,QAAQ,eAAR,C;IAARM,I,aAAAA,I;;AAEP,IAAMC,MAAMD,KAAK,CAAC,OAAD,EAAU,OAAV,CAAL,EACTE,KADS,CACH;AAAA,SAAKF,KAAKG,EAAEC,KAAF,CAAQ,EAAR,CAAL,CAAL;AAAA,CADG,CAAZ;;AAGAC,QAAQC,GAAR,CAAYL,GAAZ;;AAIA,IAAMM,QAAQ,SAARA,KAAQ;AAAA,SACZV,aAAaW,GAAG,CAAH,CAAb,CADY;AAAA,CAAd;;AAGA,IAAMC,eAAe,SAAfA,YAAe;AAAA,SACnBD,GAAGE,MAAH,CAAU;AAAA,WAAKP,IAAI,GAAT;AAAA,GAAV,CADmB;AAAA,CAArB;;AAGA,IAAMQ,SAAS,SAATA,MAAS;AAAA,SACfR,IAAI,CADW;AAAA,CAAf;;AAGA,IAAMS,MAAM,SAANA,GAAM;AAAA,SACVL,MAAME,aAAaD,EAAb,CAAN,EAAwBK,GAAxB,CAA4BF,MAA5B,CADU;AAAA,CAAZ;;AAGAN,QAAQC,GAAR,CAAYM,IAAI,CAAC,CAAD,EAAI,GAAJ,EAAS,CAAT,EAAY,IAAZ,CAAJ,CAAZ;;AAGA,IAAME,OAAO,SAAPA,IAAO;AAAA,SACV,EAACC,IAAIA,EAAL,EAASC,MAAM,OAAf,EAAwBC,gBAAgBF,KAAK,CAA7C,EADU;AAAA,CAAb;;AAGA,IAAMG,KAAM;AACVC,QAAM;AAAA,WACJ,IAAIpB,IAAJ,CAAS,UAACqB,GAAD,EAAMnB,GAAN;AAAA,aACPA,IAAIc,KAAK,CAAL,GAASpB,MAAMmB,KAAKC,EAAL,CAAN,CAAT,GAA2BnB,KAAK,WAAL,CAA/B,CADO;AAAA,KAAT,CADI;AAAA;AADI,CAAZ;;AAMA,IAAMyB,eAAe,SAAfA,YAAe;AAAA,SACnBC,EAAEC,IAAF,CAAOxB,KAAKyB,QAAZ,EAAsBzB,KAAK0B,EAA3B,CADmB;AAAA,CAArB;;AAMAP,GAAGC,IAAH,GAAU;AAAV,CACGjB,KADH,CACSmB,YADT,EAEGnB,KAFH,CAES;AAAA,SACLgB,GAAGC,IAAH,CAAQO,KAAKT,cAAb,CADK;AAAA,CAFT,EAIGf,KAJH,CAISmB,YAJT,EAKGM,IALH,CAKQ;AAAA,SAAKtB,QAAQuB,KAAR,CAAcN,CAAd,CAAL;AAAA,CALR,EAMI;AAAA,SAAKjB,QAAQC,GAAR,CAAYuB,CAAZ,CAAL;AAAA,CANJ","file":"25.js","sourcesContent":["//  Apply Natural Transformations in everyday work\n\n//We see three varied examples of where natural transformations come in handy.\n\n\nconst { Right, Left, fromNullable } = require('./examples/either')\nconst Box = require('./examples/box')\nconst Task = require('data.task')\nconst {List} = require('immutable-ext')\n\nconst res = List(['hello', 'world'])\n  .chain(x => List(x.split('')))\n\nconsole.log(res)\n\n\n\nconst first = xs =>\n  fromNullable(xs[0])\n\nconst largeNumbers = xs =>\n  xs.filter(x => x > 100)\n\nconst larger = x =>\nx * 2\n\nconst app = xs =>\n  first(largeNumbers(xs)).map(larger)\n\nconsole.log(app([2, 400, 5, 1000]))\n\n\nconst fake = id =>\n  ({id: id, name: 'user1', best_friend_id: id + 1})\n\nconst Db = ({\n  find: id =>\n    new Task((rej, res) =>\n      res(id > 2 ? Right(fake(id)) : Left('not found')))\n})\n\nconst eitherToTask = e =>\n  e.fold(Task.rejected, Task.of)\n\n\n\n\nDb.find() // Task(Right(user))\n  .chain(eitherToTask)\n  .chain(user =>\n    Db.find(user.best_friend_id))\n  .chain(eitherToTask)\n  .fork(e => console.error(e),\n    r => console.log(r))\n\n"]}