{"version":3,"sources":["../../modules/6.js"],"names":["Sum","x","concat","y","inspect","toString","All","First","res","console","log","First1","fold","f","isLeft","o","find","xs","List","foldMap","Right","Left","empty"],"mappings":";;AAAA;;;;;;;;;;;;;;AAcA;AACA;AACA;AACA;AACA;;AAEA,IAAMA,MAAM,SAANA,GAAM;AAAA,SACT;AACCC,QADD;AAECC,YAAQ;AAAA,UAAKC,CAAL,QAAEF,CAAF;AAAA,aACND,IAAIC,IAAIE,CAAR,CADM;AAAA,KAFT;AAICC,aAAS;AAAA,sBACAH,CADA;AAAA,KAJV;AAMCI,cAAU;AAAA,sBACDJ,CADC;AAAA;AANX,GADS;AAAA,CAAZ;AAUA;AACA;;AAEA,IAAMK,MAAM,SAANA,GAAM;AAAA,SACT;AACCL,QADD;AAECC,YAAQ;AAAA,UAAKC,CAAL,SAAEF,CAAF;AAAA,aACNK,IAAIL,KAAKE,CAAT,CADM;AAAA,KAFT;AAICC,aAAS;AAAA,sBACAH,CADA;AAAA,KAJV;AAMCI,cAAU;AAAA,sBACDJ,CADC;AAAA;AANX,GADS;AAAA,CAAZ;;AAWA;;AAEA,IAAMM,QAAQ,SAARA,KAAQ;AAAA,SACX;AACCN,QADD;AAECC,YAAQ;AAAA,aACNK,MAAMN,CAAN,CADM;AAAA,KAFT;AAICG,aAAS;AAAA,wBACEH,CADF;AAAA,KAJV;AAMCI,cAAU;AAAA,wBACCJ,CADD;AAAA;AANX,GADW;AAAA,CAAd;;AAWA,IAAMO,MAAMD,MAAM,MAAN,EAAcL,MAAd,CAAqBK,MAAM,WAAN,CAArB,EAAyCL,MAAzC,CAAgDK,MAAM,kBAAN,CAAhD,CAAZ;AACAE,QAAQC,GAAR,CAAYF,GAAZ;;AAGA;;AAEA;;AAEA,IAAMG,SAAS,SAATA,MAAS;AAAA,SACZ;AACCC,UAAM;AAAA,aAAKX,EAAEW,IAAF,CAAOC,CAAP,EAAUA,CAAV,CAAL;AAAA,KADP;AAECX,YAAQ;AAAA,aAAKD,EAAEa,MAAF,GAAWC,CAAX,GAAeR,MAAMN,CAAN,CAApB;AAAA;AAFT,GADY;AAAA,CAAf;;AAOA,IAAMe,OAAO,SAAPA,IAAO,CAACC,EAAD,EAAKJ,CAAL;AAAA,SACXK,KAAKD,EAAL,EACGE,OADH,CACW;AAAA,WAAKR,OAAOE,EAAEZ,CAAF,IAAOmB,MAAMnB,CAAN,CAAP,GAAkBoB,MAAzB,CAAL;AAAA,GADX,EACkDV,OAAOW,KADzD,EAEGV,IAFH,CAEQ;AAAA,WAAIX,CAAJ;AAAA,GAFR,CADW;AAAA,CAAb","file":"6.js","sourcesContent":["/*\nCreate types with Semigroups\n\nAn introduction to concatting items via the formal Semi-group interface.\nSemi-groups are simply a type with a concat method that are associative.\nWe define three semigroup instances and see them in action.\n\nA semigroup is a type with a concat method.\n We say that's closed under concatenation here. It does not change types.\n\n\n A type with a concat method that is associative.\n*/\n\n// In general, the motivation to use semigroups is 4 fold (no pun intended)\n// 1. One has instant intuition that we're doing some kind of combination.\n// 2. There are many properties that hold like identity, associativity, and other group theory stuff.\n// 3. Semigroups beget semigroups... they will combine all the subparts (I show an example in the last real world vid)\n// 4. Since they are associative, they can be parallelized by default.\n\nconst Sum = x =>\n  ({\n    x,\n    concat: ({x: y}) =>\n      Sum(x + y),\n    inspect: () =>\n      `Sum(${x})`,\n    toString: () =>\n      `Sum(${x})`\n  })\n//associative (1+1) + 1 === 1 + (1+1)\n//const res = Sum(1).concat(Sum(2))\n\nconst All = x =>\n  ({\n    x,\n    concat: ({x: y}) =>\n      All(x && y),\n    inspect: () =>\n      `All(${x})`,\n    toString: () =>\n      `All(${x})`\n  })\n\n//const res = All(false).concat(All(true))\n\nconst First = x =>\n  ({\n    x,\n    concat: _ =>\n      First(x),\n    inspect: () =>\n      `First(${x})`,\n    toString: () =>\n      `First(${x})`\n  })\n\nconst res = First(\"blah\").concat(First(\"ice cream\")).concat(First('meta programming'))\nconsole.log(res)\n\n\n/////////////////////////////////////////////////////////////////\n\n//Here's a \"practical\" example. The First here always holds an Either.\n\nconst First1 = x =>\n  ({\n    fold: f => x.fold(f, f),\n    concat: o => x.isLeft ? o : First(x)\n  })\n\n\nconst find = (xs, f) =>\n  List(xs)\n    .foldMap(x => First1(f(x) ? Right(x) : Left()), First1.empty)\n    .fold(x =>x)\n"]}