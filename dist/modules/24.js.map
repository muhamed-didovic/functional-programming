{"version":3,"sources":["../../modules/24.js"],"names":["Either","require","Right","Left","fromNullable","Box","Task","first","xs","res1","map","x","res2","console","log","boxToEither","b","fold","res4","res5","res3","eitherToTask","e","rejected","of","fork","error","r"],"mappings":";;AAAA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA,IAAMA,SAASC,QAAQ,mBAAR,CAAf;IACQC,K,GAA8BF,M,CAA9BE,K;IAAOC,I,GAAuBH,M,CAAvBG,I;IAAMC,Y,GAAiBJ,M,CAAjBI,Y;;AACrB,IAAMC,MAAMJ,QAAQ,gBAAR,CAAZ;AACA,IAAMK,OAAOL,QAAQ,WAAR,CAAb;;AAEA;AACA;;AAEA;AACA,IAAMM,QAAQ,SAARA,KAAQ;AAAA,SACZH,aAAaI,GAAG,CAAH,CAAb,CADY;AAAA,CAAd;;AAGA,IAAMC,OAAOF,MAAM,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAAN,EAAeG,GAAf,CAAmB;AAAA,SAAKC,IAAI,CAAT;AAAA,CAAnB,CAAb;AACA,IAAMC,OAAOL,MAAM,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAQG,GAAR,CAAY;AAAA,SAAKC,IAAI,CAAT;AAAA,CAAZ,CAAN,CAAb;AACAE,QAAQC,GAAR,CAAYL,IAAZ,EAAkBG,IAAlB;;AAEA,IAAMG,cAAc,SAAdA,WAAc;AAAA,SAClBC,EAAEC,IAAF,CAAOf,KAAP,CADkB;AAAA,CAApB,C,CACgB;;AAEhB,IAAMgB,OAAOH,YAAYV,IAAI,GAAJ,CAAZ,EAAsBK,GAAtB,CAA0B;AAAA,SAAKC,IAAI,CAAT;AAAA,CAA1B,CAAb;AACA,IAAMQ,OAAOJ,YAAYV,IAAI,GAAJ,EAASK,GAAT,CAAa;AAAA,SAAKC,IAAI,CAAT;AAAA,CAAb,CAAZ,CAAb;AACAE,QAAQC,GAAR,CAAYI,IAAZ,EAAkBC,IAAlB;;AAGA,IAAMC,OAAOL,YAAYV,IAAI,GAAJ,CAAZ,CAAb;AACAQ,QAAQC,GAAR,CAAY,MAAZ,EAAoBM,IAApB;;AAEA;AACA,IAAMC,eAAe,SAAfA,YAAe;AAAA,SACnBC,EAAEL,IAAF,CAAOX,KAAKiB,QAAZ,EAAsBjB,KAAKkB,EAA3B,CADmB;AAAA,CAArB;;AAGAH,aAAanB,MAAM,aAAN,CAAb,EACCuB,IADD,CACM;AAAA,SAAKZ,QAAQa,KAAR,CAAc,KAAd,EAAqBJ,CAArB,CAAL;AAAA,CADN,EAEM;AAAA,SAAKT,QAAQC,GAAR,CAAY,KAAZ,EAAmBa,CAAnB,CAAL;AAAA,CAFN;;AAIA;AACA;AACA","file":"24.js","sourcesContent":["//Principled type conversions with Natural Transformations\n\n//We learn what a natural transformation is and see the laws it\n// must obey. We will see how a natural transformation must uphold\n// the law of nt(x).map(f) == nt(x.map(f)).\n\n//Natural Transformations is type conversation, it takes on functor to\n// another functor\n\n// F a -> G a // structural change\n\nconst Either = require('./examples/either')\nconst { Right, Left, fromNullable } = Either\nconst Box = require('./examples/box')\nconst Task = require('data.task')\n\n//RULE or LAW\n// nt(x).map(f) == nt(x.map(f))\n\n//convert List to array\nconst first = xs =>\n  fromNullable(xs[0])\n\nconst res1 = first([1,2,3]).map(x => x + 1)\nconst res2 = first([1,2,3].map(x => x + 1))\nconsole.log(res1, res2)\n\nconst boxToEither = b =>\n  b.fold(Right) // or b.fold(x => Right(x))\n\nconst res4 = boxToEither(Box(100)).map(x => x * 2)\nconst res5 = boxToEither(Box(100).map(x => x * 2))\nconsole.log(res4, res5)\n\n\nconst res3 = boxToEither(Box(100));\nconsole.log('res3', res3);\n\n//convert Either to T ask\nconst eitherToTask = e =>\n  e.fold(Task.rejected, Task.of)\n\neitherToTask(Right('nightingale'))\n.fork(e => console.error('err', e),\n      r => console.log('res', r))\n\n// eitherToTask(Left('errrrrr'))\n// .fork(e => console.error('err', e),\n//       r => console.log('res', r))"]}