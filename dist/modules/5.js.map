{"version":3,"sources":["../../modules/5.js"],"names":["Right","chain","f","x","map","fold","g","inspect","Left","fromNullable","tryCatch","e","openSite","current_user","renderPage","showLogin","openSite2","currentUser","getPrefs","user","premium","loadPrefs","preferences","defaultPrefs","gP","u","prefs","streetName","address","street","name","sn","formNullable","a","s","n","concatUniq","ys","found","filter","y","concat","cu","wrapExamples","example","previewPath","preview","fs","readFileSync","we","Object","assign","parseDbUrl","c","JSON","parse","cfg","url","match","pdu"],"mappings":"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","file":"5.js","sourcesContent":["const Right = x =>\n  ({\n    chain: f => f(x),\n    map: f => Right(f(x)),\n    fold: (f, g) => g(x),\n    inspect: () => `Right(${x})`\n  })\n\nconst Left = x =>\n  ({\n    //chain is used when there is Either inside of map method\n    chain: f => Left(x), // .chain expects you to run a function and return another one\n    map: f => Left(x),\n    fold: (f, g) => f(x), // .fold is going to capture the idea of removing a value from its context -- taking it out of the box, whether it's a right or a left or a box itself.\n    inspect: () => `Left(${x})`\n  })\n\nconst fromNullable = x => x != null ? Right(x) : Left(null);\n\nconst tryCatch = f => {\n  try {\n    return Right(f())\n  } catch (e) {\n    return Left(e)\n  }\n}\n\n//First Example\nconst openSite = () => {\n  if (current_user) {\n    return renderPage(current_user);\n  } else {\n    return showLogin()\n  }\n};\n\nconst openSite2 = () => {\n  //first way\n  // return fromNullable(currentUser)\n  //   .map(u => user)\n  //   .fold(() => showLogin(), u => renderPage(u));\n\n  //second way\n  return fromNullable(currentUser)\n    .fold(showLogin, renderPage)\n};\n\n//Second Example\nconst getPrefs = user => {\n  if (user.premium) {\n    return loadPrefs(user.preferences);\n  } else {\n    return defaultPrefs;\n  }\n};\n\nconst gP = user => {\n  //first way\n  // return fromNullable(user.premium)\n  //   .chain(u => tryCatch(user.preferences))\n  //   .fold(() => defaultPrefs, prefs => loadPrefs(prefs));\n\n  //second way\n  return (user.premium ? Right(user) : Left('not premium'))\n    .map(u => u.preferences)\n    .fold(() => defaultPrefs, prefs => loadPrefs(prefs))\n};\n\n\n//Third Example\nconst streetName = user => {\n  const address = user.address;\n\n  if (address) {\n    const street = address.street;\n\n    if (street) {\n      return street.name;\n    }\n    return 'no street';\n  }\n};\n\nconst sn = user => {\n  //first way\n  // return fromNullable(user)\n  //   .chain(user => formNullable(user.address))\n  //   .chain(address => formNullable(address.street))\n  //   .fold(() => 'no street', street => street.name)\n\n  //second way\n  return fromNullable(user.address)\n    .chain(a => formNullable(a.street))\n    .map(s => s.name)\n    .fold(() => 'no street', n => n)\n};\n\n//Fourth Example\nconst concatUniq = (x, ys) => {\n  const found = ys.filter(y => y === x)[0];\n  return found ? ys : ys.concat(x);\n};\n\nconst cu = (x, ys) => {\n  return fromNullable(ys.filter(y => y === x)[0])\n    .fold(() => ys.concat(x), y => ys)\n};\n\n//Fifth Example\nconst wrapExamples = example => {\n  if (example.previewPath) {\n    try {\n      example.preview = fs.readFileSync(example.previewPath);\n    } catch (e) {\n    }\n  }\n  return example;\n};\n\nconst we = example => {\n  return fromNullable(example.previewPath)\n    .chain(example => tryCatch(fs.readFileSync(example.previewPath)))\n    .fold(() => example, preview => Object.assign(example, {preview}))//Object.assign({}, example, { preview })\n};\n\n//Sixth example\nconst parseDbUrl = cfg => {\n  try {\n    const c = JSON.parse(cfg);\n    if (c.url) {\n      return c.url.match(/postgres:...../);\n    }\n  } catch (e) {\n    return null;\n  }\n};\n\nconst pdu = cfg => {\n  //first way, maybe this wont work???\n  // return tryCatch(cfg)\n  //   .fromNullable(JSON.parse(cfg))\n  //   .map(c => c.url)\n  //   .fold(() => null, u => u.match('...'));\n\n  //second way\n  return tryCatch(() => JSON.parse(cfg))\n    .chain(c => fromNullable(c.url))\n    .fold(() => null, u => u.match('...'));\n};\n\n"]}