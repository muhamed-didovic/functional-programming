{"version":3,"sources":["../../modules/2.js"],"names":["Box","map","f","x","fold","toString","moneyToFloat","str","s","replace","console","log","r","parseFloat","percentToFloat","replaced","number","applyDiscount","price","discount","cost","savings","result"],"mappings":";;AAAA;;AAEA,IAAMA,MAAM,SAANA,GAAM;AAAA,SACT;AACCC,SAAK;AAAA,aAAKD,IAAIE,EAAEC,CAAF,CAAJ,CAAL;AAAA,KADN;AAECC,UAAM;AAAA,aAAKF,EAAEC,CAAF,CAAL;AAAA,KAFP;AAGCE,cAAU;AAAA,sBAAaF,CAAb;AAAA;AAHX,GADS;AAAA,CAAZ;;AAOA,IAAMG,eAAe,SAAfA,YAAe;AAAA,SACnBN,IAAIO,GAAJ,EACGN,GADH,CACO;AAAA,WAAKO,EAAEC,OAAF,CAAU,KAAV,EAAiB,EAAjB,CAAL;AAAA,GADP,EAEGR,GAFH,CAEO,aAAK;AACRS,YAAQC,GAAR,CAAY,GAAZ,EAAiBC,CAAjB,EAAoBC,WAAWD,CAAX,CAApB;AACA,WAAOC,WAAWD,CAAX,CAAP;AACD,GALH,CADmB;AAAA,CAArB;;AAQA,IAAME,iBAAiB,SAAjBA,cAAiB;AAAA,SACrBd,IAAIO,IAAIE,OAAJ,CAAY,KAAZ,EAAmB,EAAnB,CAAJ,EACGR,GADH,CACO;AAAA,WAAYY,WAAWE,QAAX,CAAZ;AAAA,GADP,EAEGd,GAFH,CAEO,kBAAU;AACbS,YAAQC,GAAR,CAAY,MAAZ,EAAoBK,MAApB,EAA4BA,SAAS,IAArC,EAA2CH,WAAW,KAAX,CAA3C;AACA,WAAOG,SAAS,IAAhB;AACD,GALH,CADqB;AAAA,CAAvB;;AAQA,IAAMC,gBAAgB,SAAhBA,aAAgB,CAACC,KAAD,EAAQC,QAAR;AAAA,SACpBb,aAAaY,KAAb,EACGd,IADH,CACQ;AAAA,WACJU,eAAeK,QAAf,EACGf,IADH,CACQ;AAAA,aACNgB,OAAOA,OAAOC,OADR;AAAA,KADR,CADI;AAAA,GADR,CADoB;AAAA,CAAtB;;AAOA,IAAMC,SAASL,cAAc,OAAd,EAAuB,KAAvB,CAAf;AACAP,QAAQC,GAAR,CAAYW,MAAZ","file":"2.js","sourcesContent":["//Refactor imperative code to a single composed expression using Box\n\nconst Box = x =>\n  ({\n    map: f => Box(f(x)),\n    fold: f => f(x),\n    toString: () => `Box(${x})`\n  })\n\nconst moneyToFloat = str =>\n  Box(str)\n    .map(s => s.replace(/\\$/g, ''))\n    .map(r => {\n      console.log(111, r, parseFloat(r));\n      return parseFloat(r)\n    })\n\nconst percentToFloat = str =>\n  Box(str.replace(/\\%/g, ''))\n    .map(replaced => parseFloat(replaced))\n    .map(number => {\n      console.log('2222', number, number * 0.01, parseFloat('44%'));\n      return number * 0.01\n    })\n\nconst applyDiscount = (price, discount) =>\n  moneyToFloat(price)\n    .fold(cost =>\n      percentToFloat(discount)\n        .fold(savings =>\n        cost - cost * savings))\n\nconst result = applyDiscount('$5.00', '20%')\nconsole.log(result)\n"]}