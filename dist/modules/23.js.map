{"version":3,"sources":["../../modules/23.js"],"names":["Task","require","List","Map","httpGet","path","params","of","home","about","blog","map","console","log","route","traverse","fork","error","routes"],"mappings":";;AAAA;;AAEA;AACA;;AAEA,IAAMA,OAAOC,QAAQ,WAAR,CAAb;;eACsBA,QAAQ,eAAR,C;IAAdC,I,YAAAA,I;IAAMC,G,YAAAA,G;;AAEd,IAAMC,UAAU,SAAVA,OAAU,CAACC,IAAD,EAAOC,MAAP;AAAA,SACdN,KAAKO,EAAL,CAAWF,IAAX,aADc;AAAA,CAAhB;;AAGA;AACA;AACA;AACAF,IAAI,EAACK,MAAM,GAAP,EAAYC,OAAO,WAAnB,EAAgCC,MAAM,OAAtC,EAAJ,EACGC,GADH,CACQ,iBAAS;AACbC,UAAQC,GAAR,CAAY,KAAZ,EAAmBT,QAAQU,KAAR,EAAe,EAAf,CAAnB;AACA,SAAOV,QAAQU,KAAR,EAAe,EAAf,CAAP;AACD,CAJH;AAKE;;AAEFF,QAAQC,GAAR,CAAY,GAAZ;;AAEA;AACAV,IAAI,EAACK,MAAM,GAAP,EAAYC,OAAO,WAAnB,EAAgCC,MAAM,OAAtC,EAAJ,EACGK,QADH,CACYf,KAAKO,EADjB,EACqB;AAAA,SAASH,QAAQU,KAAR,EAAe,EAAf,CAAT;AAAA,CADrB,EAEGE,IAFH,CAEQJ,QAAQK,KAFhB,EAEuBL,QAAQC,GAF/B;AAGAD,QAAQC,GAAR,CAAY,CAAZ;;AAEA;AACAV,IAAI,EAACK,MAAM,CAAC,GAAD,EAAM,OAAN,CAAP,EAAuBC,OAAO,CAAC,WAAD,CAA9B,EAAJ,EACGM,QADH,CACYf,KAAKO,EADjB,EACqB;AAAA,SACjBL,KAAKgB,MAAL,EACGH,QADH,CACYf,KAAKO,EADjB,EACqB;AAAA,WAASH,QAAQU,KAAR,EAAe,EAAf,CAAT;AAAA,GADrB,CADiB;AAAA,CADrB,EAIGE,IAJH,CAIQJ,QAAQK,KAJhB,EAIuBL,QAAQC,GAJ/B;AAKAD,QAAQC,GAAR,CAAY,CAAZ","file":"23.js","sourcesContent":["//Maintaining structure whilst asyncing\n\n//We take our Promise.all() analogy further by using traversable on a Map().\n// Then we use two traversals in the same workflow.\n\nconst Task = require('data.task')\nconst { List, Map } = require('immutable-ext')\n\nconst httpGet = (path, params) =>\n  Task.of(`${path} result`)\n\n//result: Map({home: Task('/ result')})\n//what we really want is Task to be outside like this\n//Task(Map({home: '/result'})), in order to do that see 2 way\nMap({home: '/', about: '/about-us', blog: '/blog'})\n  .map( route => {\n    console.log('222', httpGet(route, {}));\n    return httpGet(route, {})\n  })\n  //.fold(console.error, console.log)\n\nconsole.log('1');\n\n//2 way\nMap({home: '/', about: '/about-us', blog: '/blog'})\n  .traverse(Task.of, route => httpGet(route, {}))\n  .fork(console.error, console.log)\nconsole.log(2);\n\n//3 way, Tasks is outer\nMap({home: ['/', '/home'], about: ['/about-us']})\n  .traverse(Task.of, routes =>\n    List(routes)\n      .traverse(Task.of, route => httpGet(route, {})))\n  .fork(console.error, console.log);\nconsole.log(3);  "]}