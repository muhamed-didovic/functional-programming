{"version":3,"sources":["../../modules/9.js"],"names":["require","Right","Left","List","fromNullable","x","Sum","concat","y","inspect","empty","Product","Any","All","Max","Infinity","Min","Pair","x1","y1","First","fold","f","isLeft","o","find","xs","foldMap","stats","of","page","views","map","console","log","Fn","hasVowels","match","longWord","length","both","compose","filter"],"mappings":"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","file":"9.js","sourcesContent":["//A curated collection of Monoids and their uses\n\n\nconst { Right, Left } = require('data.either')\nconst { List } = require('immutable-ext')\n\nconst fromNullable = x => x != null ? Right(x) : Left(null);\n\nconst Sum = x =>\n  ({\n    x,\n    concat: ({x: y}) => Sum(x + y),\n    inspect: () => `Sum(${x})`\n  })\n\nSum.empty = () => Sum(0)\n\nconst Product = x =>\n  ({\n    x,\n    concat: ({x: y}) => Product(x * y),\n    inspect: () => `Product(${x})`\n  })\n\nProduct.empty = () => Product(1)\n\nconst Any = x =>\n  ({\n    x,\n    concat: ({x: y}) => Any(x || y),\n    inspect: () => `Any(${x})`\n  })\n\nAny.empty = () => Any(false)\n\n\nconst All = x =>\n  ({\n    x,\n    concat: ({x: y}) => All(x && y),\n    inspect: () => `All(${x})`\n  })\n\nAll.empty = () => All(true)\n\n\nconst Max = x =>\n  ({\n    x,\n    concat: ({x: y}) => Max(x > y ? x : y),\n    inspect: () => `Max(${x})`\n  })\n\nMax.empty = () => Max(-Infinity)\n\nconst Min = x =>\n  ({\n    x,\n    concat: ({x: y}) => Min(x < y ? x : y),\n    inspect: () => `Min(${x})`\n  })\n\nMin.empty = () => Min(Infinity)\n\nconst Pair = (x, y) =>\n  ({\n    x,\n    y,\n    concat: ({x: x1, y: y1}) =>\n      Pair(x.concat(x1), y.concat(y1)),\n    inspect: () => `Pair(${x}, ${y})`\n  })\n\n\n// monoid that keeps the first Right\nconst First = x =>\n  ({\n    fold: f => f(x),\n    concat: o =>\n      x.isLeft ? o : First(x)\n  })\n\nFirst.empty = First(Left())\n\nconst find = (xs, f) =>\n  List(xs)\n    .foldMap(x => First(f(x) ? Right(x) : Left()), First.empty)\n    .fold(x => x)\n\nfind([3,4,5,6,7], x => x > 4)\n// Right(5)\n\n\nconst stats = List.of({page: 'Home', views: 40},\n  {page: 'About', views: 10},\n  {page: 'Blog', views: null})\n\nstats.foldMap(x =>\n  fromNullable(x.views).map(Sum), Right(Sum(0)))\n// Right(Sum(54))\nconsole.log(111, stats);\n\nconst Fn = f =>\n  ({\n    fold: f,\n    concat: o =>\n      Fn(x => f(x).concat(o.fold(x)))\n  })\n\nconst hasVowels = x => !!x.match(/[aeiou]/ig)\nconst longWord = x => x.length >= 5\n\nconst both = Fn(compose(All, hasVowels))\n  .concat(Fn(compose(All, longWord)))\n\n  ['gym', 'bird', 'lilac']\n  .filter(x => both.fold(x).x)\n// [lilac]"]}