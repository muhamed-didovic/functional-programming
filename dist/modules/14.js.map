{"version":3,"sources":["../../modules/14.js"],"names":["Box","require","Task","Either","Right","Left","fromNullable","List","Map","r1","map","s","substr","toUpperCase","r2","res1","res2","id","x","res3","of","res4","console","log"],"mappings":";;AAAA;AACA,IAAMA,MAAMC,QAAQ,gBAAR,CAAZ;AACA,IAAMC,OAAOD,QAAQ,WAAR,CAAb;AACA,IAAME,SAASF,QAAQ,mBAAR,CAAf;IACOG,K,GAA6BD,M,CAA7BC,K;IAAOC,I,GAAsBF,M,CAAtBE,I;IAAMC,Y,GAAgBH,M,CAAhBG,Y;;eACEL,QAAQ,eAAR,C;IAAdM,I,YAAAA,I;IAAMC,G,YAAAA,G;;AAEd;AACA;AACA;;AAEA,IAAMC,KAAKT,IAAI,WAAJ,EACRU,GADQ,CACJ;AAAA,SAAKC,EAAEC,MAAF,CAAS,CAAT,CAAL;AAAA,CADI,EAERF,GAFQ,CAEJ;AAAA,SAAKC,EAAEE,WAAF,EAAL;AAAA,CAFI,CAAX;;AAIA,IAAMC,KAAKd,IAAI,WAAJ,EACRU,GADQ,CACJ;AAAA,SAAKC,EAAEC,MAAF,CAAS,CAAT,EAAYC,WAAZ,EAAL;AAAA,CADI,CAAX;;AAGA;;AAEA;AACA,IAAME,OAAOV,KAAK,WAAL,EAAkB;AAAlB,CACVK,GADU,CACN;AAAA,SAAKC,EAAEC,MAAF,CAAS,CAAT,CAAL;AAAA,CADM,EAEVF,GAFU,CAEN;AAAA,SAAKC,EAAEE,WAAF,EAAL;AAAA,CAFM,CAAb;;AAIA,IAAMG,OAAOX,KAAK,WAAL,EAAkB;AAAlB,CACVK,GADU,CACN;AAAA,SAAKC,EAAEC,MAAF,CAAS,CAAT,EAAYC,WAAZ,EAAL;AAAA,CADM,CAAb;;AAGA;AACA,IAAMI,KAAK,SAALA,EAAK;AAAA,SAAKC,CAAL;AAAA,CAAX;;AAEA,IAAMC,OAAOZ,KAAKa,EAAL,CAAQ,SAAR,EAAmBV,GAAnB,CAAuBO,EAAvB,CAAb,C,CAAyC;AACzC,IAAMI,OAAOJ,GAAGV,KAAKa,EAAL,CAAQ,SAAR,CAAH,CAAb,C,CAAqC;;AAErCE,QAAQC,GAAR,CAAYd,EAAZ,EAAgBK,EAAhB;AACAQ,QAAQC,GAAR,CAAYR,IAAZ,EAAkBC,IAAlB;AACAM,QAAQC,GAAR,CAAYJ,IAAZ,EAAkBE,IAAlB","file":"14.js","sourcesContent":["//FUNCTORS\nconst Box = require('./examples/box')\nconst Task = require('data.task')\nconst Either = require('./examples/either')\nconst {Right, Left, fromNullable} = Either\nconst { List, Map } = require('immutable-ext')\n\n//FUNCTOR is any type with map method with few laws:\n//1. f(x).map(f).map(g) == f(x).map(x => g(f(x))) //this laws preserves function composition while map\n//2. f(x).map(id) == id(f(x)) //\n\nconst r1 = Box('squirrels')\n  .map(s => s.substr(5))\n  .map(s => s.toUpperCase());\n\nconst r2 = Box('squirrels')\n  .map(s => s.substr(5).toUpperCase());\n\n// 'squirrels'.substr(5).toUpperCase() //function composition\n\n//--------------------------------\nconst res1 = Left('squirrels') // Right('squirrels')\n  .map(s => s.substr(5))\n  .map(s => s.toUpperCase());\n\nconst res2 = Left('squirrels') // Right('squirrels')\n  .map(s => s.substr(5).toUpperCase());\n\n//----------------------------\nconst id = x => x;\n\nconst res3 = List.of('crayons').map(id); //Right, Box, Left\nconst res4 = id(List.of('crayons')); //Right, Box, Left\n\nconsole.log(r1, r2)\nconsole.log(res1, res2)\nconsole.log(res3, res4)"]}