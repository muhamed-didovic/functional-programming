{"version":3,"sources":["../../modules/10.js"],"names":["require","Map","List","Sum","x","concat","y","inspect","empty","res2","brian","sara","map","fold","console","log"],"mappings":";;AAAA;AACA;;;eAGsBA,QAAQ,eAAR,C;IAAdC,G,YAAAA,G;IAAKC,I,YAAAA,I;;AAEb;AACA;;;AACA,IAAMC,MAAM,SAANA,GAAM;AAAA,SACT;AACCC,QADD;AAECC,YAAQ;AAAA,UAAKC,CAAL,QAAEF,CAAF;AAAA,aAAYD,IAAIC,IAAIE,CAAR,CAAZ;AAAA,KAFT;AAGCC,aAAS;AAAA,sBAAaH,CAAb;AAAA;AAHV,GADS;AAAA,CAAZ;;AAOAD,IAAIK,KAAJ,GAAY;AAAA,SAAML,IAAI,CAAJ,CAAN;AAAA,CAAZ;AACA;AACA;AACA;AACA;AACA;AACA,IAAMM,OAAOR,IAAI,EAACS,OAAO,EAAR,EAAYC,MAAM,CAAlB,EAAJ,EACVC,GADU,CACNT,GADM,EAEVU,IAFU,CAELV,IAAIK,KAAJ,EAFK,CAAb;;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACCM,QAAQC,GAAR,CAAY,YAAZ,EAA0BN,KAAKF,OAAL,EAA1B;AACD;AACAO,QAAQC,GAAR,CAAYZ,IAAI,CAAJ,EAAOE,MAAP,CAAcF,IAAI,CAAJ,CAAd,CAAZ","file":"10.js","sourcesContent":["//Whenever you see a fold, think removal from a type,\n// be it a collection which relies on a monoid or just a single value in a type.\n\n\nconst { Map, List } = require('immutable-ext');\n\n// -----------------------------\n// Sum monoid\nconst Sum = x =>\n  ({\n    x,\n    concat: ({x: y}) => Sum(x + y),\n    inspect: () => `Sum(${x})`\n  })\n\nSum.empty = () => Sum(0)\n// -----------------------------\n//\n// const res1 = [Sum(1),Sum(2),Sum(3)]\n//   .reduce((acc, x) => acc.concat(x), Sum.empty())\n//\nconst res2 = Map({brian: 10, sara: 2})\n  .map(Sum)\n  .fold(Sum.empty())\n\n// const res33 = List.of(1,2,3)\n//   .map(x => {\n//     console.log('aaa', x);\n//     return Sum(x)\n//   })\n//   .fold(Sum.empty())\n\n// const res3 = List.of(1,2,3)\n//   .foldMap(Sum, Sum.empty())\n//\n// const s = List.of(Sum(1), Sum(2), Sum(3))\n//   .fold(Sum.empty());\n//console.log(11, res33);\n// console.log(\"result 1: \", res1.inspect());\n console.log(\"result 2: \", res2.inspect())\n// console.log(\"result 3: \", res3.inspect())\nconsole.log(Sum(1).concat(Sum(2)));\n\n\n"]}