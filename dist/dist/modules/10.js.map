{"version":3,"sources":["../../modules/10.js"],"names":["require","Map","List","Sum","x","concat","y","inspect","empty","res1","reduce","acc","res2","brian","sara","map","fold","res33","of","res3","foldMap","s","console","log"],"mappings":";;AAAA;AACA;;;eAGsBA,QAAQ,eAAR,C;IAAdC,G,YAAAA,G;IAAKC,I,YAAAA,I;;AAEb;AACA;;;AACA,IAAMC,MAAM,SAANA,GAAM;AAAA,SACT;AACCC,QADD;AAECC,YAAQ;AAAA,UAAKC,CAAL,QAAEF,CAAF;AAAA,aAAYD,IAAIC,IAAIE,CAAR,CAAZ;AAAA,KAFT;AAGCC,aAAS;AAAA,sBAAaH,CAAb;AAAA;AAHV,GADS;AAAA,CAAZ;;AAOAD,IAAIK,KAAJ,GAAY;AAAA,SAAML,IAAI,CAAJ,CAAN;AAAA,CAAZ;AACA;;AAEA,IAAMM,OAAO,CAACN,IAAI,CAAJ,CAAD,EAAQA,IAAI,CAAJ,CAAR,EAAeA,IAAI,CAAJ,CAAf,EACVO,MADU,CACH,UAACC,GAAD,EAAMP,CAAN;AAAA,SAAYO,IAAIN,MAAJ,CAAWD,CAAX,CAAZ;AAAA,CADG,EACwBD,IAAIK,KAAJ,EADxB,CAAb;;AAGA,IAAMI,OAAOX,IAAI,EAACY,OAAO,EAAR,EAAYC,MAAM,CAAlB,EAAJ,EACVC,GADU,CACNZ,GADM,EAEVa,IAFU,CAELb,IAAIK,KAAJ,EAFK,CAAb;;AAIA,IAAMS,QAAQf,KAAKgB,EAAL,CAAQ,CAAR,EAAU,CAAV,EAAY,CAAZ,EACXH,GADW,CACP;AAAA,SAAKZ,IAAIC,CAAJ,CAAL;AAAA,CADO,EAEXY,IAFW,CAENb,IAAIK,KAAJ,EAFM,CAAd;;AAIA,IAAMW,OAAOjB,KAAKgB,EAAL,CAAQ,CAAR,EAAU,CAAV,EAAY,CAAZ,EACVE,OADU,CACFjB,GADE,EACGA,IAAIK,KAAJ,EADH,CAAb;;AAGA,IAAMa,IAAInB,KAAKgB,EAAL,CAAQf,IAAI,CAAJ,CAAR,EAAgBA,IAAI,CAAJ,CAAhB,EAAwBA,IAAI,CAAJ,CAAxB,EACPa,IADO,CACFb,IAAIK,KAAJ,EADE,CAAV;AAEAc,QAAQC,GAAR,CAAY,EAAZ,EAAgBF,CAAhB,EAAmBJ,KAAnB;AACAK,QAAQC,GAAR,CAAY,YAAZ,EAA0Bd,KAAKF,OAAL,EAA1B;AACAe,QAAQC,GAAR,CAAY,YAAZ,EAA0BX,KAAKL,OAAL,EAA1B;AACAe,QAAQC,GAAR,CAAY,YAAZ,EAA0BJ,KAAKZ,OAAL,EAA1B;AACAe,QAAQC,GAAR,CAAYpB,IAAI,CAAJ,EAAOE,MAAP,CAAcF,IAAI,CAAJ,CAAd,CAAZ","file":"10.js","sourcesContent":["//Whenever you see a fold, think removal from a type,\n// be it a collection which relies on a monoid or just a single value in a type.\n\n\nconst { Map, List } = require('immutable-ext');\n\n// -----------------------------\n// Sum monoid\nconst Sum = x =>\n  ({\n    x,\n    concat: ({x: y}) => Sum(x + y),\n    inspect: () => `Sum(${x})`\n  })\n\nSum.empty = () => Sum(0)\n// -----------------------------\n\nconst res1 = [Sum(1),Sum(2),Sum(3)]\n  .reduce((acc, x) => acc.concat(x), Sum.empty())\n\nconst res2 = Map({brian: 10, sara: 2})\n  .map(Sum)\n  .fold(Sum.empty())\n\nconst res33 = List.of(1,2,3)\n  .map(x => Sum(x))\n  .fold(Sum.empty())\n\nconst res3 = List.of(1,2,3)\n  .foldMap(Sum, Sum.empty())\n\nconst s = List.of(Sum(1), Sum(2), Sum(3))\n  .fold(Sum.empty());\nconsole.log(11, s, res33);\nconsole.log(\"result 1: \", res1.inspect());\nconsole.log(\"result 2: \", res2.inspect())\nconsole.log(\"result 3: \", res3.inspect())\nconsole.log(Sum(1).concat(Sum(2)));\n\n\n"]}